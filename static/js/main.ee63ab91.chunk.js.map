{"version":3,"sources":["components/Text.js","components/SampleContent.js","components/AEMPage.js","App.js","serviceWorker.js","server/CustomModelClient.js","index.js"],"names":["Text","cqPath","richText","text","className","id","substr","lastIndexOf","data-rte-editelement","dangerouslySetInnerHTML","__html","AEMText","withMappable","emptyLabel","isEmpty","props","trim","length","resourceType","SampleContent","style","backgroundColor","margin","padding","AEMPage","pagePath","itemPath","App","Boolean","window","location","hostname","match","FETCH_CONFIG","headers","modelClient","modelPath","err","Promise","reject","Error","url","this","_apiHost","fetch","then","response","status","json","error","statusText","ModelClient","ModelManager","initializeAsync","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"uQAWMA,EAAO,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAI9B,OAAOD,EAFH,yBAAKE,UAAU,WAAWC,GAAIJ,EAAOK,OAAOL,EAAOM,YAAY,KAAO,GAAIC,wBAAA,EAAqBC,wBAAyB,CAACC,OAAQP,KAE9F,yBAAKC,UAAU,YAAYD,IAKzDQ,EAAUC,uBAAaZ,EAjBN,CAC1Ba,WAAY,OACZC,QAAS,SAASC,GACd,OAAQA,IAAUA,EAAMZ,MAAQY,EAAMZ,KAAKa,OAAOC,OAAS,GAE/DC,aAAc,gDCOHC,EAbO,kBAClB,yBAAKC,MAAO,CAACC,gBAAiB,OAAQC,OAAQ,OAAQC,QAAS,SAC3D,oDACA,+yBCSOC,EAVC,kBACZ,8BACI,gDACA,kBAACb,EAAD,CACEc,SAAS,qCACTC,SAAS,8BACX,kBAAC,EAAD,QCGOC,EARH,WACV,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCIcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CChBAC,EAAe,CACjBC,QAAS,ICOPC,EAAc,IDDpB,mRAQUC,GACF,IAAKA,EAAW,CACZ,IAAMC,EAAM,qCAAuCD,EACnD,OAAOE,QAAQC,OAAO,IAAIC,MAAMH,IAIpC,IAAMI,EAAG,UAAMC,KAAKC,UAAX,OAAsBP,GAC/B,OAAOQ,MAAMH,EAAKR,GAAcY,MAAK,SAASC,GAC1C,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC/C,OAAOD,EAASE,OAEb,IAAMC,EAAQ,IAAIT,MAAM,qCAAuCC,EAAKK,EAASI,YAAcJ,EAASC,QAErG,OADCE,EAAMH,SAAWA,EACXR,QAAQC,OAAOU,YAtBrC,GAAuCE,eCCnB,CAAsB,wDAC1CC,eAAaC,gBAAgB,CACzBlB,gBAGJmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAFjB,OAIS,SAAAd,GACLe,QAAQf,MAAMA,EAAMgB,c","file":"static/js/main.ee63ab91.chunk.js","sourcesContent":["import React from 'react';\nimport { withMappable } from '@adobe/aem-react-editable-components';\n\nexport const TextEditConfig = {\n    emptyLabel: 'Text',\n    isEmpty: function(props) {\n        return !props || !props.text || props.text.trim().length < 1;\n    },\n    resourceType: \"editorxpdevelopment/components/content/text\"\n};\n\nconst Text = ({ cqPath, richText, text }) => {\n    const richTextContent = () => (\n        <div className=\"aem_text\" id={cqPath.substr(cqPath.lastIndexOf('/') + 1)} data-rte-editelement dangerouslySetInnerHTML={{__html: text}}/>\n    );\n    return richText ? richTextContent() : (<div className=\"aem_text\">{text}</div>);\n};\n\nexport default Text;\n\nexport const AEMText = withMappable(Text, TextEditConfig);\n","import React from 'react';\n\nconst SampleContent = () => (\n    <div style={{backgroundColor: '#aaa', margin: '10px', padding: '10px'}}>\n        <h4>Now, back to our SPA</h4>\n        <p>\n            Now it is such a bizarrely improbable coincidence that anything so mind-bogglingly useful could have evolved purely by chance that some thinkers have chosen to see it as the final and clinching proof of the non-existence of God.\n            The argument goes something like this: \"I refuse to prove that I exist,'\" says God, \"for proof denies faith, and without faith I am nothing.\"\n            \"But,\" says Man, \"The Babel fish is a dead giveaway, isn't it? It could not have evolved by chance. It proves you exist, and so therefore, by your own arguments, you don't. QED.\"\n            \"Oh dear,\" says God, \"I hadn't thought of that,\" and promptly vanishes in a puff of logic.\n            \"Oh, that was easy,\" says Man, and for an encore goes on to prove that black is white and gets himself killed on the next zebra crossing.\n        </p>\n    </div>\n);\n\nexport default SampleContent;\n","import React from 'react';\nimport { AEMText } from './Text';\nimport SampleContent from './SampleContent';\n\nconst AEMPage = () => (\n    <main>\n        <h2>Sample AEM + SPA</h2>\n        <AEMText\n          pagePath=\"/content/editorxpdevelopment/us/en\"\n          itemPath=\"/root/responsivegrid/text\" />\n        <SampleContent />\n    </main>\n);\n\nexport default AEMPage;\n","import React from 'react';\nimport './App.css';\n\nimport AEMPage from './components/AEMPage';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AEMPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ModelClient } from '@adobe/aem-spa-page-model-manager';\n\nconst FETCH_CONFIG = {\n    headers: {}\n};\n\n/**\n * Custom ModelClient meant to demonstrate how to customize the request sent to the remote server\n */\nexport class CustomModelClient extends ModelClient {\n\n    /**\n     * Fetches a model using the given a resource path\n     *\n     * @param {string} modelPath - Path to the model\n     * @return {*}\n     */\n    fetch(modelPath) {\n        if (!modelPath) {\n            const err = 'Fetching model rejected for path: ' + modelPath;\n            return Promise.reject(new Error(err));\n        }\n\n        // Either the API host has been provided or we make an absolute request relative to the current host\n        const url = `${this._apiHost}${modelPath}`;\n        return fetch(url, FETCH_CONFIG).then(function(response) {\n            if (response.status >= 200 && response.status < 300) {\n             return response.json();\n            } else {\n                const error = new Error('while fetching the model for url: ' + url, response.statusText || response.status);\n                error.response = response;\n               return Promise.reject(error);\n            }\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ModelManager } from \"@adobe/aem-spa-page-model-manager\";\n\nimport { CustomModelClient } from './server/CustomModelClient';\n\nconst modelClient = new CustomModelClient('https://author-p15902-e23962-cmstg.adobeaemcloud.com');\nModelManager.initializeAsync({\n    modelClient\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}